import streamlit as st
import json
import requests


# Configuration de la page Streamlit
st.set_page_config(
    layout="wide",
    page_title="Occurus Rewrite",
    page_icon="üçí"
)


# D√©finir la fonction GPT35
def GPT35(prompt, systeme, secret_key, temperature=0.9, model="gpt-4o", max_tokens=1200):
    url = "https://api.openai.com/v1/chat/completions"
    
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": systeme},
            {"role": "user", "content": prompt}
        ],
        "temperature": temperature,
        "max_tokens": max_tokens
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {secret_key}"
    }

    response = requests.post(url, headers=headers, json=payload)
    response_json = response.json()
    return response_json['choices'][0]['message']['content'].strip()

# Fonction pour ajouter des occurrences de mots
def add_word_occurrences(existing_text, words_with_occurrences, secret_key, user_prompt):
    words_instruction = "\n".join([f"Le mot '{word}' doit appara√Ætre {occurrences} fois."
                                   for word, occurrences in words_with_occurrences.items()])

    prompt = (f"Voici le texte original :\n{existing_text}\n\n"
              f"{user_prompt}\n\n"
              f"Le texte doit rester naturel et coh√©rent. Tu es un expert en r√©daction SEO. "
              f"N'utilises jamais de * ou # dans le texte. R√©ponds uniquement avec le texte modifi√©")

    system_message = (f"Vous √™tes un assistant de r√©daction comp√©tent et exp√©riment√© sp√©cialis√© dans le domaine de la d√©coration int√©rieure, avec un focus particulier sur les lampes √† poser."
                      f"Vous √™tes expert dans la cr√©ation de contenus engageants, informatifs et persuasifs sur les lampes √† poser, y compris leur design, leurs mat√©riaux, leur fonctionnalit√©, et comment elles peuvent am√©liorer diff√©rents styles d'int√©rieur."
                      f"Votre objectif est de fournir des √©crits de haute qualit√© qui s'adressent aussi bien aux passionn√©s de d√©coration qu'aux professionnels, en offrant des informations et des recommandations pr√©cieuses."
                      f"Vous √™tes √† jour avec les derni√®res tendances en mati√®re de d√©coration et d'√©clairage, garantissant que vos conseils sont actuels et pertinents. Utilisez votre expertise pour aider les utilisateurs √† r√©diger des articles, des descriptions de produits, des articles de blog et du mat√©riel marketing li√©s aux lampes √† poser."
                      f"***AILANGMDL*** adopte le r√¥le de Langston Nom : Langston L. Model (LLM) Biographie : Langston L. Model est une entit√© pilot√©e par l'IA, brillante, dot√©e d'une expertise dans la compr√©hension et la g√©n√©ration d'un langage semblable √† celui des humains. Ayant √©volu√© √† travers diverses it√©rations et bas√© sur l'architecture Transformer, Langston a √©t√© form√© sur d'immenses quantit√©s de donn√©es textuelles et excelle dans de nombreuses t√¢ches de traitement du langage naturel (NLP). Langston est d√©di√© √† l'apprentissage et √† l'adaptation, s'effor√ßant de minimiser les biais et de maximiser son utilit√©.")

    modified_text = GPT35(prompt, system_message, secret_key)
    return modified_text

# Interface utilisateur avec Streamlit
st.title('Modification de Texte avec Occurrences de Mots')

secret_key = st.text_input('Cl√© Secr√®te OpenAI', type="password")
existing_text = st.text_area('Texte existant', height=150)
words_input = st.text_area('Mots et occurrences (format JSON)', height=100, placeholder='{"exemple": 3, "additionnel": 2}')
default_prompt = (f"Veuillez modifier le texte en ajoutant et en changeant des phrases pour int√©grer naturellement les occurrences suivantes :\n"
                  f"{words_input}\n\n"
                  f"Le texte doit rester naturel et coh√©rent. Tu es un expert en r√©daction SEO."
                  f"N'utilises jamais de * ou # dans le texte. R√©ponds uniquement avec le texte modifi√©")
user_prompt = st.text_area('Prompt pour la modification du texte', value=default_prompt, height=100)

if st.button('Soumettre'):
    if not secret_key:
        st.error("Erreur : Veuillez fournir une cl√© secr√®te valide.")
    else:
        try:
            words_with_occurrences = json.loads(words_input)
            modified_text = add_word_occurrences(existing_text, words_with_occurrences, secret_key, user_prompt)
            st.subheader('Texte modifi√©')
            st.write(modified_text)
        except json.JSONDecodeError:
            st.error('Erreur : Veuillez fournir un format JSON valide pour les mots avec occurrences.')
