import streamlit as st
import json
import requests
import pandas as pd
from io import BytesIO

# Configuration de la page Streamlit
st.set_page_config(
    layout="wide",
    page_title="Occurus Rewrite",
    page_icon="üçí"
)

# D√©finir la fonction GPT35
def GPT35(prompt, systeme, secret_key, temperature=0.9, model="gpt-4o-mini", max_tokens=1200):
    url = "https://api.openai.com/v1/chat/completions"
    
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": systeme},
            {"role": "user", "content": prompt}
        ],
        "temperature": temperature,
        "max_tokens": max_tokens
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {secret_key}"
    }

    response = requests.post(url, headers=headers, json=payload)
    response_json = response.json()
    return response_json['choices'][0]['message']['content'].strip()

# Fonction pour ajouter des occurrences de mots
def add_word_occurrences(existing_text, words_with_occurrences, secret_key, user_prompt):
    prompt = (f"Voici le texte original :\n{existing_text}\n\n"
              f"{user_prompt}\n\n"
              f"Le texte doit rester naturel et coh√©rent. Tu es un expert en r√©daction SEO.\n"
              f"N'utilises jamais de * ou # dans le texte. R√©ponds uniquement avec le texte modifi√©.\n\n"
              f"Utilise ce brief pour structurer et optimiser le texte.")
    system_message = ("Vous √™tes un assistant de r√©daction comp√©tent et exp√©riment√©, sp√©cialis√© dans le traitement naturel des textes.")
    return GPT35(prompt, system_message, secret_key)

# Fonction pour v√©rifier la coh√©rence des textes
def review_content(text, secret_key):
    review_prompt = (f"Voici le texte g√©n√©r√© :\n{text}\n\n"
                     f"Effectue une v√©rification et r√©√©cris le texte si n√©cessaire pour garantir la coh√©rence, l'uniformit√© et la correction des propos. "
                     f"Assure-toi que le texte reste naturel, fluide et qu'il respecte les consignes de SEO. "
                     f"Supprime les r√©p√©titions et am√©liore le ton si besoin, tout en conservant le sens du texte original. "
                     f"R√©ponds uniquement avec le texte r√©vis√© sans ajout d'annotations ou d'indications.")

    review_system_message = ("Vous √™tes un assistant de r√©vision expert, sp√©cialis√© dans l'optimisation et la coh√©rence des contenus g√©n√©r√©s par IA. "
                             "Votre objectif est de s'approcher le plus d'un contenu r√©dig√© par un humain, rester pertinent et am√©liorer la clart√©, la correction et la fluidit√© des textes, en √©vitant toute incoh√©rence.")

    return GPT35(review_prompt, review_system_message, secret_key)

# Interface utilisateur avec Streamlit
st.title('Modification et R√©vision de Texte avec Occurrences de Mots')

# Ajouter un champ pour la cl√© secr√®te OpenAI
secret_key = st.text_input('Cl√© Secr√®te OpenAI', type="password")

# Layout pour les boutons d'import, d'ex√©cution et de t√©l√©chargement
col1, col2, col3 = st.columns([1, 1, 1])

# Bouton pour charger le fichier
with col1:
    uploaded_file = st.file_uploader("T√©l√©charger un fichier XLSX", type="xlsx", label_visibility="collapsed")

# V√©rification que le fichier est charg√©
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # V√©rification des colonnes
    if 'keyword' in df.columns and 'Text or not' in df.columns and 'Occurrences' in df.columns:
        df['Texte Modifi√©'] = ""  # Initialisation de la colonne pour les r√©sultats
        df['Texte R√©vis√©'] = ""   # Colonne pour les textes apr√®s r√©vision

        # Initialisation de la barre de progression et du texte de statut
        progress_bar = st.progress(0)
        status_text = st.empty()
        total_rows = len(df)

        # Bouton pour lancer la cr√©ation des textes
        with col2:
            start_processing = st.button("Lancer la cr√©ation des textes")

        if start_processing:
            # Ex√©cuter la modification pour chaque ligne
            for index, row in df.iterrows():
                main_keyword = row['keyword']
                existing_text = row['Text or not'] if pd.notna(row['Text or not']) else ""
                
                # Charger les occurrences en JSON
                try:
                    words_with_occurrences = json.loads(row['Occurrences'])
                except json.JSONDecodeError:
                    st.error(f"Erreur de format JSON dans la ligne {index + 1}. Veuillez v√©rifier le format des occurrences.")
                    continue

                # Construire le prompt pour chaque ligne
                user_prompt = (f"Veuillez r√©diger un texte g√©n√©rique en ciblant le mot cl√© principal : {main_keyword}. "
                               f"Incorporez naturellement les occurrences des mots suivants, sans forcer leur usage :\n"
                               f"{words_with_occurrences}\n\n"
                               f"Le texte doit √™tre engageant, informatif et optimis√© pour le SEO, avec un ton professionnel et fluide. "
                               f"R√©digez en utilisant la troisi√®me personne du singulier et √©vitez toute introduction ou conclusion superflue. "
                               f"Assurez-vous de structurer le contenu avec les balises suivantes : "
                               f"- <h2> pour le titre principal du texte, "
                               f"- <h3> pour chaque sous-partie, et "
                               f"- <p> pour chaque paragraphe de contenu.\n\n"
                               f"N'utilisez jamais de caract√®res sp√©ciaux comme * ou # dans le texte. Limitez-vous √† un texte d'environ 300 mots.")

                # Afficher le statut actuel
                status_text.text(f"Texte en cours {index + 1} sur {total_rows}")

                # Appel de la fonction pour g√©n√©rer le texte modifi√©
                modified_text = add_word_occurrences(existing_text, words_with_occurrences, secret_key, user_prompt)
                df.at[index, 'Texte Modifi√©'] = modified_text
                
                # Appel de la fonction pour r√©viser le texte g√©n√©r√©
                reviewed_text = review_content(modified_text, secret_key)
                df.at[index, 'Texte R√©vis√©'] = reviewed_text

                # Mise √† jour de la barre de progression
                progress_bar.progress((index + 1) / total_rows)

            # Pr√©paration du fichier modifi√© pour le t√©l√©chargement
            output = BytesIO()
            df.to_excel(output, index=False, engine='xlsxwriter')
            output.seek(0)

            # Clear the status message after completion
            status_text.text("Traitement termin√©.")
        else:
            output = None

        # Bouton pour t√©l√©charger le fichier modifi√©
        with col3:
            if output:
                st.download_button(
                    label="T√©l√©charger le fichier XLSX avec les textes r√©vis√©s",
                    data=output,
                    file_name="Texte_Modifie_Et_Revise.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    else:
        st.error("Erreur : Le fichier XLSX doit contenir les colonnes 'keyword', 'Text or not', et 'Occurrences'.")
else:
    st.write("Veuillez t√©l√©charger un fichier XLSX pour proc√©der.")
